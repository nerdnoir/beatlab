#!/usr/local/bin/node

const program = require('commander')
const process = require('process')
const path = require('path')
const npmPackage = require('../package.json')
const builders = require('../lib/builders')
const fs = require('fs')
const shelljs = require('shelljs')
const chalk = require('chalk')

// BEGIN: HACK

function mix(command) {
    const loader = require('../lib/loader')
    const moduleRepo = loader.moduleRepo(command.repo)
    const moduleFullPath = path.join(moduleRepo, command.source)

    const mixer = require('../lib/mixer')
    const presenterTemplate = builders.HELPERS.createTemplate('presenter')
    const slides = mixer(moduleFullPath)

    const deck = presenterTemplate({ content: slides.join('\n') })

    shelljs.mkdir('-p', command.destination)
    shelljs.cp('-r', "./vendor/reveal/.", command.destination)
    fs.writeFileSync(path.join(command.destination, 'index.html'), deck)
}

// END

program
  .version(npmPackage.version)

program
  .command('info')
  .option('--export [BEATLAB_HOME]', 'Prints environment variables for exporting only.')
  .description('Display Beatlab configuration.')
  .action(function(options) {
    const modulePath = process.env.BEATLAB_HOME || path.join(process.cwd(), "modules")

    if (options.export) {
      console.log(chalk.green(`export BEATLAB_HOME = '${modulePath}'`))
    } else {
      console.log(`Module path: ${chalk.green(modulePath)}`)
      if (!process.env.BEATLAB_HOME) {
        console.log(chalk.red('$BEATLAB_HOME: NOT FOUND'))
      } else {
        console.log(chalk.green(`$BEATLAB_HOME: ${process.env.BEATLAB_HOME}`))
      }
    }
  })

program
  .command('mix <source> <destination>')
  .description('Render a track from a module path (path) to output dir (out).')
  .option('-r, --repo <repo>', "Path to a module repository.")
  .action(function(source, destination, options) {
    console.log(`Rendering module \"${chalk.green(source)}\" to: \"${chalk.blue(destination)}\"`)

    const loader = require('../lib/loader')
    const moduleRepo = loader.moduleRepo(options.repo)
    console.log(`Resolving modules from: \"${chalk.yellow(moduleRepo)}\"`)

    mix({source: source, destination: destination, repo: options.repo})
  })

program.parse(process.argv)

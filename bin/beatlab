#!/usr/local/bin/node

const program = require('commander')
const npmPackage = require('../package.json')
const chalk = require('chalk')
const process = require('process')
const path = require('path')
const builders = require('../lib/builders')
const Module = require('../lib/module')
const fs = require('fs')
const shelljs = require('shelljs')
const Loader = require('../lib/loader')
const R = require('ramda')

program
  .version(npmPackage.version)

program
  .command('info')
  .option('--export [BEATLAB_HOME]', 'Prints environment variables for export.')
  .description('Display Beatlab configuration.')
  .action(function(options) {
    const modulePath = process.env.BEATLAB_HOME || path.join(process.cwd(), "modules")

    if (options.export) {
      console.log(chalk.green(`export BEATLAB_HOME = '${modulePath}'`))
    } else {
      console.log(`Module path: ${chalk.green(modulePath)}`)
      if (!process.env.BEATLAB_HOME) {
        console.log(chalk.red('$BEATLAB_HOME: NOT FOUND'))
      } else {
        console.log(chalk.green(`$BEATLAB_HOME: ${process.env.BEATLAB_HOME}`))
      }
    }
  })

function copyReveal (destination) {
    const revealPath = path.join(__dirname, '..', 'reveal') + '/*'
    const destinationPath = path.join(destination, '/')
    console.log(`Copying reveal.js @ ${chalk.blue(revealPath)} to ${chalk.blue(destinationPath)}`)
    shelljs.cp('-R', revealPath, destinationPath)
}

const mixCommand = (source = 'main', destination = 'out', options) => {
    console.log(source)

    const loader = new Loader()
    const manifest = loader.loadModuleManifest(source)
    const module = new Module(manifest)

    const mixer = require('../lib/mixer')
    const slides = mixer(module)
    const presenterTemplate = builders.HELPERS.createTemplate('presenter')
    const deck = presenterTemplate({ content: slides.join('\n') })

    shelljs.mkdir('-p', destination)

    copyReveal(destination)

    fs.writeFileSync(path.join(destination, 'index.html'), deck)
}

program
  .command('mix [source] [destination]')
  .description('Render a module into a slide show.')
  .action(mixCommand)
  .parse(process.argv)

program.parse(process.argv)